from pydantic import BaseModel, Field
from typing import Optional
from enum import Enum

# üé≠ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class RoleEnum(str, Enum):
    employee = "employee"
    manager = "manager"
    admin = "admin"

# üìå –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å models.StatusEnum!)
class TaskStatus(str, Enum):
    open = "open"
    in_progress = "in_progress"
    completed = "completed"

# üß© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
class UserBase(BaseModel):
    username: str
    role: RoleEnum

class UserCreate(UserBase):
    pass

class User(UserBase):
    id: int

    class Config:
        from_attributes = True  # –¥–ª—è Pydantic v2 (–∞–Ω–∞–ª–æ–≥ orm_mode)

# üß© –ó–∞–¥–∞—á–∏
class TaskBase(BaseModel):
    title: str
    description: Optional[str] = None
    complexity: int  # –æ—Ç 1 –¥–æ 5

class TaskCreate(TaskBase):
    assigned_to: Optional[int] = None 

class Task(TaskBase):
    id: int
    status: TaskStatus
    assigned_to: Optional[int]

    class Config:
        from_attributes = True

# üìç –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
class TaskUpdateStatus(BaseModel):
    new_status: TaskStatus

# üìç –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
class ReassignTask(BaseModel):
    new_user_id: int
